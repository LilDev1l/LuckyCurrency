    <Application x:Class="LuckyCurrency.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:LuckyCurrency"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:cnv="clr-namespace:LuckyCurrency.Converter"
             xmlns:cmd="clr-namespace:LuckyCurrency.Infrastructure.Commands"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             StartupUri="Views/MainWindow.xaml">
    <!--dispatcherunhandledexception="application_dispatcherunhandledexception"-->

    <Application.Resources>
        <ResourceDictionary>
            
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/ToastNotifications.Messages;component/Themes/Default.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <!-- Theme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Themes/Light.Blue.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <cnv:SimbolsAfterCommaConverter x:Key="TemplateConverter"/>
            <cnv:OrderValueConverter x:Key="OrderValue"/>

            <Style x:Key="IsMouseOver"
                   TargetType="fa:ImageAwesome">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="Gray"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="BuyOrSellLastTrade">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding LastTrade.Side}" Value="Buy">
                        <Setter Property="fa:ImageAwesome.Icon" Value="chevronup"/>
                        <Setter Property="fa:ImageAwesome.Foreground" Value="Green"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding LastTrade.Side}" Value="Sell">
                        <Setter Property="fa:ImageAwesome.Icon" Value="chevrondown"/>
                        <Setter Property="fa:ImageAwesome.Foreground" Value="Red"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="BuyOrSellOrder">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Side}" Value="Sell">
                        <Setter Property="DataGridTextColumn.Foreground"  Value="Red"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=Side}" Value="Buy">
                        <Setter Property="DataGridTextColumn.Foreground"  Value="Green"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="DataGridCellRight" 
                   TargetType="DataGridCell"
                   BasedOn="{StaticResource MahApps.Styles.DataGridCell}">
                <Setter Property="HorizontalAlignment" Value="Right"/>
            </Style>

            <Style x:Key="DataGridColumnHeaderRight" 
                   TargetType="DataGridColumnHeader"
                   BasedOn="{StaticResource MahApps.Styles.DataGridColumnHeader}">
                <Setter Property="HorizontalContentAlignment" Value="Right" />
            </Style>

            <Style x:Key="NumericUpDown" TargetType="{x:Type mah:NumericUpDown}">
                <Setter Property="TextAlignment" Value="Left"/>
                <Setter Property="Width" Value="120"/>
            </Style>
            
            <ControlTemplate x:Key="ButtonBuy" TargetType="{x:Type ButtonBase}">
                <Grid>
                    <mah:ClipBorder x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="#1fb064" CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <mah:ClipBorder x:Name="DisabledVisualElement" Background="{DynamicResource MahApps.Brushes.Control.Disabled}" CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <mah:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (mah:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="#f7faf5">
                        <mah:ContentControlEx.BorderBrush>
                            <RadialGradientBrush>
                                <GradientStop Color="Black" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </RadialGradientBrush>
                        </mah:ContentControlEx.BorderBrush>
                    </mah:ContentControlEx>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Border" Value="#1b8952"/>
                        <Setter Property="BorderBrush" TargetName="Border" Value="{Binding (mah:ControlsHelper.MouseOverBorderBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" TargetName="Border" Value="{Binding (mah:ControlsHelper.FocusBorderBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter Property="BorderThickness" TargetName="Border" Value="{Binding (mah:ControlsHelper.FocusBorderThickness), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.7"/>
                        <Setter Property="Opacity" TargetName="PART_ContentPresenter" Value="0.3"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ButtonSell" TargetType="{x:Type ButtonBase}">
                <Grid>
                    <mah:ClipBorder x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="#e13e3e" CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <mah:ClipBorder x:Name="DisabledVisualElement" Background="{DynamicResource MahApps.Brushes.Control.Disabled}" CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <mah:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (mah:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="#f7faf5">
                        <mah:ContentControlEx.BorderBrush>
                            <RadialGradientBrush>
                                <GradientStop Color="Black" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </RadialGradientBrush>
                        </mah:ContentControlEx.BorderBrush>
                    </mah:ContentControlEx>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Border" Value="#af3335"/>
                        <Setter Property="BorderBrush" TargetName="Border" Value="{Binding (mah:ControlsHelper.MouseOverBorderBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" TargetName="Border" Value="{Binding (mah:ControlsHelper.FocusBorderBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter Property="BorderThickness" TargetName="Border" Value="{Binding (mah:ControlsHelper.FocusBorderThickness), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.7"/>
                        <Setter Property="Opacity" TargetName="PART_ContentPresenter" Value="0.3"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="ChangeTheme" TargetType="{x:Type fa:ImageAwesome}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentTheme}" Value="Dark">
                        <Setter Property="Icon" Value="SunOutline"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentTheme}" Value="Light">
                        <Setter Property="Icon" Value="MoonOutline"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            
        </ResourceDictionary>

       

    </Application.Resources>
</Application>
