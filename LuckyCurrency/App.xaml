<Application x:Class="LuckyCurrency.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:LuckyCurrency"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:cnv="clr-namespace:LuckyCurrency.Converter"
             xmlns:cmd="clr-namespace:LuckyCurrency.Infrastructure.Commands"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             StartupUri="Views/Autorization/Login.xaml">
    <!--dispatcherunhandledexception="application_dispatcherunhandledexception"-->

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/ToastNotifications.Messages;component/Themes/Default.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <cnv:TemplateConverter x:Key="TemplateConverter"/>

            <Style x:Key="BuyOrSell">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding LastTrade.Side}" Value="Buy">
                        <Setter Property="fa:ImageAwesome.Icon" Value="chevronup"/>
                        <Setter Property="fa:ImageAwesome.Foreground" Value="Green"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding LastTrade.Side}" Value="Sell">
                        <Setter Property="fa:ImageAwesome.Icon" Value="chevrondown"/>
                        <Setter Property="fa:ImageAwesome.Foreground" Value="Red"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="BuyOrSellOrders">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Side}" Value="Sell">
                        <Setter Property="DataGridTextColumn.Foreground"  Value="Red"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=Side}" Value="Buy">
                        <Setter Property="DataGridTextColumn.Foreground"  Value="Green"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="DataGridCell" 
               TargetType="DataGridCell">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
            </Style>

            <Style x:Key="DataGridCellRight" 
               TargetType="DataGridCell"
               BasedOn="{StaticResource DataGridCell}">
                <Setter Property="HorizontalAlignment" Value="Right"/>
            </Style>

            <Style x:Key="DataGridColumnHeaderRight" 
                               TargetType="DataGridColumnHeader">
                <Setter Property="HorizontalContentAlignment" Value="Right" />
            </Style>

            <Style x:Key="DecimalUpDownStyle1" TargetType="{x:Type xctk:DecimalUpDown}">
                <Setter Property="TextAlignment" Value="Left"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type xctk:DecimalUpDown}">
                            <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch">
                                <xctk:WatermarkTextBox x:Name="PART_TextBox" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </xctk:ButtonSpinner>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>

       

    </Application.Resources>
</Application>
